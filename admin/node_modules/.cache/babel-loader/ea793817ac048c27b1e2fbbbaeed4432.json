{"ast":null,"code":"const PUERTO = 8001;\nconst BASE_URL = `http://localhost:${PUERTO}`;\n\nconst mysql = require('mysql');\n\nconst express = require('express');\n\nconst jwt = require('jsonwebtoken');\n\nconst config = require('./config');\n\nconst con = mysql.createConnection(config.database);\n\nconst http = require('http');\n\nconst app = express();\napp.set('llave', config.llave);\n\nconst bodyParser = require('body-parser');\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({\n  extended: true\n}));\napp.use(function (req, res, next) {\n  res.setHeader('Access-Control-Allow-Origin', '*');\n  res.setHeader('Access-Control-Allow-Methods', 'GET, POST, PATCH, DELETE');\n  res.setHeader('Access-Control-Allow-Headers', 'Authorization, Origin,Origin, X-Requested-With, Content-Type, Accept, access-token');\n  next();\n});\n\ngetData = (req, res, query) => {\n  con.query(query, (err, rows) => {\n    if (err) throw err;\n    res.send(verifyToken(req.headers['access-token'], rows[0]));\n  });\n};\n\nverifyToken = (token = false, data = false, msg = '') => {\n  let tokenStatus = true;\n\n  if (token) {\n    jwt.verify(token, app.get('llave'), (err, decoded) => {\n      if (err) {\n        tokenStatus = false;\n      }\n    });\n  } else {\n    tokenStatus = false;\n  }\n\n  const answer = {\n    msg,\n    data,\n    tokenStatus\n  };\n  return JSON.stringify(answer);\n};\n\nencriptar = (user, pass) => {\n  var crypto = require('crypto');\n\n  var hmac = crypto.createHmac('sha1', user).update(pass).digest('hex');\n  console.log('Encriptado', hmac);\n  return hmac;\n};\n\nconst rutasProtegidas = express.Router();\nrutasProtegidas.use((req, res, next) => {\n  const token = req.headers['access-token'];\n\n  if (token) {\n    jwt.verify(token, app.get('llave'), (err, decoded) => {\n      if (err) {\n        return res.json({\n          mensaje: 'Token inválida',\n          tokenStatus: false\n        });\n      } else {\n        req.decoded = decoded;\n        next();\n      }\n    });\n  } else {\n    res.send({\n      mensaje: 'Token no proveída.'\n    });\n  }\n});\napp.post('/auth', function (request, response) {\n  const payload = {\n    check: true\n  };\n  const token = jwt.sign(payload, app.get('llave'), {\n    expiresIn: 3600\n  });\n  response.json({\n    msg: 'Autenticación correcta',\n    tokenStatus: true,\n    data: {\n      tokenStatus: true,\n      token\n    },\n    token\n  }); //  const username = request.body.username;\n  //  const password = encriptar(username, request.body.password);\n  //  if (username && password) {\n  // \t con.query(`SELECT * FROM users WHERE user_user = ? AND password_user = ?`, [username, password], function(error, results, fields) {\n  // \t\t if (results.length > 0) {\n  // \t\t\t const payload = {\n  // \t\t\t\t check:  true\n  // \t\t\t };\n  // \t\t\t const token = jwt.sign(payload, app.get('llave'), {\n  // \t\t\t\t expiresIn: 3600\n  // \t\t\t });\n  // \t\t\t response.json({\n  // \t\t\t\t msg: 'Autenticación correcta',\n  // \t\t\t\t tokenStatus: true,\n  // \t\t\t\t data:{\n  // \t\t\t\t\ttokenStatus: true,\n  // \t\t\t\t\ttoken\n  // \t\t\t\t },\n  // \t\t\t\t token\n  // \t\t\t });\n  // \t\t } else {\n  // \t\t\t response.json({\n  // \t\t\t\t msg: 'Usuario o Contraseña Incorrecta',\n  // \t\t\t\t tokenStatus: false,\n  // \t\t\t\t data:{\n  // \t\t\t\t\ttokenStatus: false,\n  // \t\t\t\t },\n  // \t\t\t });\n  // \t\t }\t\t\t\n  // \t });\n  //  } else {\n  // \t response.json({\n  // \t\t msg: 'Por favor ingresa Usuario y Contraseña',\n  // \t\t tokenStatus: false,\n  // \t\t data:{\n  // \t\t\ttokenStatus: false,\n  // \t\t },\n  // \t });\n  //  }\n}); //  Description\n\napp.get('/description', (req, res) => {\n  con.query('CALL get_description();', (err, rows) => {\n    if (err) throw err;\n    res.send(verifyToken(req.headers['access-token'], rows[0][0]));\n  });\n});\napp.patch('/description', rutasProtegidas, (req, res) => {\n  const data = req.body;\n  const query = `CALL put_description(${data.id_description}, '${data.title_description}',\n\t\t'${data.content_description}', '${data.navbar_description}');`;\n  con.query(query, err => {\n    if (err) throw err;\n  });\n  res.send(verifyToken(req.headers['access-token'], false, `Description Actualizada`));\n}); // Places\n\napp.get('/places/:place', (req, res) => {\n  getData(req, res, `CALL get_place(${req.params.place});`);\n});\napp.patch('/places/:place', rutasProtegidas, (req, res) => {\n  const data = req.body;\n  const query = `CALL put_places(${data.id_place}, '${data.name_place}', '${data.state_place}', '${data.city_place}',\n\t\t'${data.image_place}', '${data.description_place}', '${data.url_place}');`;\n  con.query(query, err => {\n    if (err) throw err;\n  });\n  res.send(verifyToken(req.headers['access-token'], false, `Lugar Actualizado`));\n});\napp.delete('/places/:place', rutasProtegidas, (req, res) => {\n  const query = `CALL delete_place('${req.params.place}');`;\n  con.query(query, err => {\n    if (err) throw err;\n  });\n  res.status(200).send(verifyToken(req.headers['access-token'], false, `Lugar Eliminando`));\n});\napp.get('/places', (req, res) => {\n  getData(req, res, 'CALL get_all_places();');\n});\napp.post('/places', rutasProtegidas, (req, res) => {\n  const data = req.body;\n  const query = `CALL post_place('${data.name_place}', '${data.state_place}', '${data.city_place}',\n\t'${data.image_place}', '${data.description_place}', '${data.url_place}');`;\n  con.query(query, err => {\n    if (err) throw err;\n  });\n  res.status(200).send(verifyToken(req.headers['access-token'], false, `Lugar Agregado`));\n}); // Usuarios\n\napp.get('/users/:user', (req, res) => {\n  getData(req, res, `CALL get_user(${req.params.user});`);\n});\napp.patch('/users/:user', rutasProtegidas, (req, res) => {\n  const data = req.body;\n  const query = `CALL put_user(${data.id_user}, '${data.name_user}', '${data.user_user}',\n\t\t'${data.email_user}', '${data.password_user === \"\" ? \"\" : encriptar(data.user_user, data.password_user)}');`;\n  con.query(query, err => {\n    if (err) throw err;\n  });\n  res.status(200).send(verifyToken(req.headers['access-token'], false, `Usuario Actualizado`));\n});\napp.delete('/users/:user', rutasProtegidas, (req, res) => {\n  const query = `CALL delete_user('${req.params.user}');`;\n  con.query(query, err => {\n    if (err) throw err;\n  });\n  res.status(200).send(verifyToken(req.headers['access-token'], false, `Usuario Eliminado`));\n});\napp.get('/users', (req, res) => {\n  getData(req, res, 'CALL get_all_users();');\n});\napp.post('/users', rutasProtegidas, (req, res) => {\n  const data = req.body;\n  const query = `CALL post_user('${data.name_user}', '${data.user_user}',\n\t\t'${data.email_user}', '${encriptar(data.user_user, data.password_user)}');`;\n  con.query(query, err => {\n    if (err) throw err;\n  });\n  res.status(200).send(verifyToken(req.headers['access-token'], false, `Usuario Agregado`));\n});\napp.get('/', (req, res) => {\n  res.status(200).send('Bienvenido al API');\n});\nhttp.createServer(app).listen(8001, () => {\n  console.log(`Servidor iniciado en LocalHost (${BASE_URL})`);\n});","map":{"version":3,"sources":["/home/baizt/Documentos/inventario/src/api/api.js"],"names":["PUERTO","BASE_URL","mysql","require","express","jwt","config","con","createConnection","database","http","app","set","llave","bodyParser","use","json","urlencoded","extended","req","res","next","setHeader","getData","query","err","rows","send","verifyToken","headers","token","data","msg","tokenStatus","verify","get","decoded","answer","JSON","stringify","encriptar","user","pass","crypto","hmac","createHmac","update","digest","console","log","rutasProtegidas","Router","mensaje","post","request","response","payload","check","sign","expiresIn","patch","body","id_description","title_description","content_description","navbar_description","params","place","id_place","name_place","state_place","city_place","image_place","description_place","url_place","delete","status","id_user","name_user","user_user","email_user","password_user","createServer","listen"],"mappings":"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","sourcesContent":["const PUERTO = 8001;\nconst BASE_URL = `http://localhost:${PUERTO}`;\nconst mysql = require('mysql');\nconst express = require('express');\nconst jwt = require('jsonwebtoken');\nconst config = require('./config');\n\nconst con = mysql.createConnection(config.database);\n\nconst http = require('http');\nconst app = express();\n\napp.set('llave', config.llave);\n\nconst bodyParser = require('body-parser'); \napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.use(function(req, res, next){\n\tres.setHeader('Access-Control-Allow-Origin', '*');\n\tres.setHeader('Access-Control-Allow-Methods', 'GET, POST, PATCH, DELETE');\n\tres.setHeader('Access-Control-Allow-Headers', 'Authorization, Origin,Origin, X-Requested-With, Content-Type, Accept, access-token');\n\tnext();\n})\n\ngetData = (req, res, query) => {\n\tcon.query(query, (err, rows) => {\n\t\tif(err) throw err;\n\t\tres.send(verifyToken(req.headers['access-token'], rows[0]));\n\t});\n};\n\nverifyToken = (token=false, data=false, msg='') => {\n\tlet tokenStatus = true;\n\n\tif (token) {\n\t\tjwt.verify(token, app.get('llave'), (err, decoded) => {\n\t\t\tif (err) {\n\t\t\t   tokenStatus = false;\n\t\t\t}\n\t\t});\n\n\t} else {\n\t   tokenStatus = false;\n\t}\n\n\tconst answer = {\n\t\tmsg,\n\t\tdata,\n\t\ttokenStatus,\n\t}\n\treturn JSON.stringify(answer);\n}\n\nencriptar = (user, pass) => {\n   var crypto = require('crypto');\n   var hmac = crypto.createHmac('sha1', user).update(pass).digest('hex');\n   console.log('Encriptado', hmac)\n   return hmac;\n}\n\nconst rutasProtegidas = express.Router(); \nrutasProtegidas.use((req, res, next) => {\n\tconst token = req.headers['access-token'];\n    if (token) {\n\t\tjwt.verify(token, app.get('llave'), (err, decoded) => {\n\t\t\tif (err) {\n\t\t\t\treturn res.json({\n\t\t\t\t\tmensaje: 'Token inválida',\n\t\t\t\t\ttokenStatus: false\n\t\t\t\t});    \n\t\t\t} else {\n\t\t\t\treq.decoded = decoded;    \n\t\t\t\tnext();\n\t\t\t}\n\t\t});\n    } else {\n\t\tres.send({ \n\t\t\tmensaje: 'Token no proveída.' \n\t\t});\n    }\n });\n \n app.post('/auth', function(request, response) {\n\n\tconst payload = {\n\t\tcheck:  true\n\t};\n\tconst token = jwt.sign(payload, app.get('llave'), {\n\t\texpiresIn: 3600\n\t});\n\n\tresponse.json({\n\t\tmsg: 'Autenticación correcta',\n\t\ttokenStatus: true,\n\t\tdata:{\n\t\t   tokenStatus: true,\n\t\t   token\n\t\t},\n\t\ttoken\n\t});\n\n\t//  const username = request.body.username;\n\t//  const password = encriptar(username, request.body.password);\n\n\t//  if (username && password) {\n\t// \t con.query(`SELECT * FROM users WHERE user_user = ? AND password_user = ?`, [username, password], function(error, results, fields) {\n\t\t\t \n\t// \t\t if (results.length > 0) {\n \n\t// \t\t\t const payload = {\n\t// \t\t\t\t check:  true\n\t// \t\t\t };\n\t// \t\t\t const token = jwt.sign(payload, app.get('llave'), {\n\t// \t\t\t\t expiresIn: 3600\n\t// \t\t\t });\n \n\t// \t\t\t response.json({\n\t// \t\t\t\t msg: 'Autenticación correcta',\n\t// \t\t\t\t tokenStatus: true,\n\t// \t\t\t\t data:{\n\t// \t\t\t\t\ttokenStatus: true,\n\t// \t\t\t\t\ttoken\n\t// \t\t\t\t },\n\t// \t\t\t\t token\n\t// \t\t\t });\n\t// \t\t } else {\n\t// \t\t\t response.json({\n\t// \t\t\t\t msg: 'Usuario o Contraseña Incorrecta',\n\t// \t\t\t\t tokenStatus: false,\n\t// \t\t\t\t data:{\n\t// \t\t\t\t\ttokenStatus: false,\n\t// \t\t\t\t },\n\t// \t\t\t });\n\t// \t\t }\t\t\t\n\t// \t });\n\t//  } else {\n\t// \t response.json({\n\t// \t\t msg: 'Por favor ingresa Usuario y Contraseña',\n\t// \t\t tokenStatus: false,\n\t// \t\t data:{\n\t// \t\t\ttokenStatus: false,\n\t// \t\t },\n\t// \t });\n\t//  }\n });\n\n//  Description\napp.get('/description', (req, res) => {\n\tcon.query('CALL get_description();', (err, rows) => {\n\t\tif(err) throw err;\n\t\tres.send(verifyToken(req.headers['access-token'], rows[0][0]));\n\t});\n})\n\napp.patch('/description', rutasProtegidas, (req, res) => {\n\tconst data = req.body;\n\tconst query = `CALL put_description(${data.id_description}, '${data.title_description}',\n\t\t'${data.content_description}', '${data.navbar_description}');`;\n\n\tcon.query(query, (err) => {\n\t\t\tif(err) throw err;\n\t});\n\n\tres.send(verifyToken(req.headers['access-token'], false, `Description Actualizada`));\n})\n\n// Places\napp.get('/places/:place', (req, res) => {\n\tgetData(req, res, `CALL get_place(${req.params.place});`);\n})\n\napp.patch('/places/:place', rutasProtegidas, (req, res) => {\n\tconst data = req.body;\n\tconst query = `CALL put_places(${data.id_place}, '${data.name_place}', '${data.state_place}', '${data.city_place}',\n\t\t'${data.image_place}', '${data.description_place}', '${data.url_place}');`;\n\n\tcon.query(query, (err) => {\n\t\t\tif(err) throw err;\n\t});\n\n\tres.send(verifyToken(req.headers['access-token'], false, `Lugar Actualizado`));\n})\n\napp.delete('/places/:place', rutasProtegidas, (req, res) => {\n\tconst query = `CALL delete_place('${req.params.place}');`;\n\t\t\n\tcon.query(query, (err) => {\n\t\t\tif(err) throw err;\n\t});\n\n\tres.status(200).send(verifyToken(req.headers['access-token'], false, `Lugar Eliminando`));\n})\n\napp.get('/places', (req, res) => {\n\tgetData(req, res, 'CALL get_all_places();');\n})\n\napp.post('/places', rutasProtegidas, (req, res) => {\n\tconst data = req.body;\n\tconst query = `CALL post_place('${data.name_place}', '${data.state_place}', '${data.city_place}',\n\t'${data.image_place}', '${data.description_place}', '${data.url_place}');`;\n\t\n\tcon.query(query, (err) => {\n\t\t\tif(err) throw err;\n\t});\n\n\tres.status(200).send(verifyToken(req.headers['access-token'], false, `Lugar Agregado`));\n})\n\n// Usuarios\napp.get('/users/:user', (req, res) => {\n\tgetData(req, res, `CALL get_user(${req.params.user});`);\n})\n\napp.patch('/users/:user', rutasProtegidas, (req, res) => {\n\tconst data = req.body;\n\tconst query = `CALL put_user(${data.id_user}, '${data.name_user}', '${data.user_user}',\n\t\t'${data.email_user}', '${data.password_user === \"\" ? \"\" : encriptar(data.user_user, data.password_user)}');`;\n\t\t\n\tcon.query(query, (err) => {\n\t\t\tif(err) throw err;\n\t});\n\n\tres.status(200).send(verifyToken(req.headers['access-token'], false, `Usuario Actualizado`));\n})\n\napp.delete('/users/:user', rutasProtegidas, (req, res) => {\n\tconst query = `CALL delete_user('${req.params.user}');`;\n\t\t\n\tcon.query(query, (err) => {\n\t\t\tif(err) throw err;\n\t});\n\n\tres.status(200).send(verifyToken(req.headers['access-token'], false, `Usuario Eliminado`));\n})\n\napp.get('/users', (req, res) => {\n\tgetData(req, res, 'CALL get_all_users();');\n})\n\napp.post('/users', rutasProtegidas, (req, res) => {\n\tconst data = req.body;\n\tconst query = `CALL post_user('${data.name_user}', '${data.user_user}',\n\t\t'${data.email_user}', '${encriptar(data.user_user, data.password_user)}');`;\n\t\t\n\tcon.query(query, (err) => {\n\t\t\tif(err) throw err;\n\t});\n\n\tres.status(200).send(verifyToken(req.headers['access-token'], false, `Usuario Agregado`));\n})\n\napp.get('/', (req, res) => {\n\tres.status(200).send('Bienvenido al API');\n})\n\nhttp.createServer(app).listen(8001, () => {\n\tconsole.log(`Servidor iniciado en LocalHost (${BASE_URL})`);\n})\n"]},"metadata":{},"sourceType":"module"}